autoload add-zsh-hook

case $OSTYPE in
    darwin*)
	alias grep='ggrep --color=auto'
	alias ls='ls --color -F'
        ;;
    linux-gnu)
	if [[ -f /etc/debian_version ]] || [[ -f /etc/ubuntu_version ]]; then
	  alias grep='grep --color=auto'
	  alias gzip='gzip --rsyncable'
	    eval $(lessfile)
	    alias ls='ls --color -F'
	else # Unknown system
	    if grep --version 2>&1 | grep -q GNU; then
		alias grep='grep --color=auto'
	    fi
	    if gzip --help 2>&1 | grep -q rsyncable; then
	      alias gzip='gzip --rsyncable'
	    fi
	    if whence lessfile >/dev/null; then
		eval $(lessfile)
	    fi
	    if ls --version 2>&1 | grep -q GNU; then
		alias ls='ls --color -F'
	    fi
	fi
	;;
esac

export LESS=-iQRS

alias gdb='gdb -q'

if [[ -f $HOME/bin/e ]]; then
  export EDITOR=e
else
  export EDITOR=nano
fi

# History

HISTFILE=$HOME/.zsh_history
export HISTSIZE=1000000
export SAVEHIST=800000
setopt EXTENDED_HISTORY
setopt HIST_FCNTL_LOCK
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_NO_STORE
setopt HIST_REDUCE_BLANKS
setopt HIST_SAVE_NO_DUPS
setopt SHARE_HISTORY
unsetopt BANG_HIST

# Make ZLE more emacs-like

bindkey "\C-w" kill-region

# Misc zsh settings

setopt AUTO_PUSHD
unsetopt AUTO_MENU
unsetopt BEEP
# / is not a part of word
slashre=/; export WORDCHARS=${WORDCHARS/$slashre}
unsetopt AUTO_REMOVE_SLASH # do not remove / after completion

# Prompt, terminal title

case "$HOST" in
  p1)
    EXPECTED_USER=misha;;
  *)
    EXPECTED_USER=dottedmag;;
esac

case "$TERM" in
    dumb)
	export PROMPT="%n@%m%f:%~ %# "
	;;
    xterm*|foot)
	preexec() {
	  print -Pn "\033]2;%m:%~ %# "
	  print -n "$2\007"
	}
	precmd() {
	    if [[ $USER == $EXPECTED_USER ]]; then
		DM_PROMPT_USER=
	    else
		DM_PROMPT_USER="%F{white}%K{red}$USER%f%k@"
	    fi
	    print -nP "\033]2;%m:%~ %#\007"
	}

	setopt PROMPT_SUBST
	export PROMPT='[${DM_PROMPT_USER}%F{blue}%m%f:%~]%(?.. %F{white}%K{red}%?%f%k)${DM_PROMPT_GIT}%B%#%b '
	;;
esac

if [ -n "$CHEZMOI" ]; then
  PROMPT="%U%F{red}(chezmoi)%f%u $PROMPT"
fi

dm_git_action() {
  local git_dir="$1"

  if [ -d "$git_dir/rebase-apply" ]; then
    if [ -f "$git_dir/rebase/rebasing" ]; then
      echo rebase
    elif [ -f "$git_dir/rebase/applying" ]; then
      echo am
    else
      echo rebase/am
    fi
    return
  fi

  if [ -d "$git_dir/rebase-merge" ]; then
    if [ -f "$git_dir/rebase-merge/interactive" ]; then
      echo rebase-i
    else
      echo rebase-m
    fi
    return
  fi

  if [ -f "$git_dir/MERGE_HEAD" ]; then
    echo merge
    return
  fi

  if [ -f "$git_dir/BISECT_LOG" ]; then
    echo bisect
    return
  fi

  if [ -f "$git_dir/CHERRY_PICK_HEAD" ]; then
    if [ -d "$git_dir/sequencer" ]; then
      echo cherry-seq
    else
      echo cherry
    fi
    return
  fi

  if [ -d "$git_dir/sequencer" ]; then
    echo cherry-or-revert
    return
  fi
}

dm_git_ref() {
  local git_dir="$1"
  local branch

  branch=$(git --git-dir="$1" symbolic-ref --short HEAD 2>/dev/null)

  if [ -n "$branch" ]; then
    echo "$branch"
    return
  fi

  # git describe might take a lot of time on large repositories if
  # it performs a fuzzy match, so --candidates=0 disables it
  ref=$(git --git-dir="$1" describe --candidates=0 HEAD 2>/dev/null)

  if [ -n "$ref" ]; then
    echo "$ref"
    return
  fi

  git --git-dir="$1" rev-parse --short HEAD
}

dm_git_dir() {
  git rev-parse --git-dir 2>/dev/null
}

dm_git_prompt() {
  local git_dir git_ref git_action

  git_dir=$(dm_git_dir)
  if [[ $git_dir = "" ]]; then
    DM_PROMPT_GIT=
    return
  fi

  git_ref=$(dm_git_ref "$git_dir")
  git_action=$(dm_git_action "$git_dir")
  if [[ "$git_action" != "" ]]; then
    git_action="%F{blue}-$git_action%f"
  fi

  DM_PROMPT_GIT=" %F{green}(${git_ref}${git_action})%f "
}
add-zsh-hook precmd dm_git_prompt

# grep

## Easier to type
alias -g GG="| grep"

# Git, Go

## Ignore tests in 'git grep'
alias -g GONTE="':!:*_test.go'"

# ffmpeg/ffprobe

alias ffmpeg='ffmpeg -hide_banner'
alias ffprobe='ffprobe -hide_banner'

# direnv

eval "$(direnv hook zsh)"

