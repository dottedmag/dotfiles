#!/usr/bin/env python3
"""
Send .epub and .mobi books to Kindle
"""
import sys, subprocess, os.path, argparse, configparser


def known_extension(f):
    return f.endswith(".epub") or f.endswith(".mobi") or f.endswith(".txt") or f.endswith(".fb2") or f.endswith(".azw3") or f.endswith(".cbr") or f.endswith(".fb2.zip")


def check_type(filenames):
    unknown = [f for f in filenames if not known_extension(f)]
    if unknown:
        sys.stderr.write("Don't know how to process files: %s\n" % ", ".join(unknown))
        sys.exit(1)


def convert_file(fnm):
    if fnm.endswith(".epub") or fnm.endswith(".fb2") or fnm.endswith(".fb2.zip"):
        fne = os.path.splitext(fnm)[0]+".mobi"
        if subprocess.call(["ebook-convert", fnm, fne]) != 0:
            sys.stderr.write("Unable to convert %s to Mobi\n" % fnm)
            sys.exit(1)
        return fne
    return fnm


def check_presence(filenames):
    missing = [f for f in filenames if not os.path.isfile(f)]
    if missing:
        sys.stderr.write("Cannot find files: %s\n" % ", ".join(missing))
        sys.exit(1)


def send(dest, filenames):
    email = dest + "@free.kindle.com"
    for fnm in filenames:
        args = ["emate", "mailto", "-t", email, "--send-now", "-s", "bokz", fnm]
        if subprocess.call(args) != 0:
            sys.stderr.write("Unable to send e-mail with %s to Kindle\n" % fnm)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("books", metavar="BOOK", nargs="+", help="Books to send")
    parser.add_argument(
        "-t", "--to", metavar="ACCT", help="Kindle account to send books to"
    )
    args = parser.parse_args()
    config = configparser.ConfigParser()
    config.read(os.path.expanduser("~/.config/tokindle.ini"))
    to = config.get("send", "to", fallback=None)
    if args.to is not None:
        to = args.to
    if not to:
        sys.stderr.write("Don't know where to send books to.\n")
        sys.exit(2)
    check_type(args.books)
    filenames = [convert_file(f) for f in args.books]
    check_presence(filenames)
    send(to, filenames)


if __name__ == "__main__":
    main()
